# Elastic Beanstalk Nginx Configuration File

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log;

pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {

	log_format main
	    '$remote_addr '
	    '$remote_user '
	    '[$time_local] '
	    '"$request" '
	    '$status '
	    '$body_bytes_sent '
	    '"$http_referer" '
	    '"$http_user_agent" '
	    '$request_time '
	    '$server_name '
	    '$upstream_addr '
	    '$host '
        '$request_uri '
	    '"$http_x_forwarded_for"';

    access_log    /var/log/nginx/access.log;

    ########################
    # Start of additional SSL security config
    # The following lines were generated at https://ssl-config.mozilla.org/#server=nginx&server-version=1.15.3&config=intermediate
    # These configuration lines provide increased security for our redirection server, and result in an A+ score from Qualys SSL Labs
    ########################
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;

    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam.pem
    ssl_dhparam /ssl/dhparam.pem;

    # modern configuration
    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # DNS Resolver for OCSP
    resolver 1.1.1.1 1.0.0.1 9.9.9.9 8.8.8.8 8.8.4.4;

    ########################
    # End of additional SSL security config
    ########################

	# Tell Nginx not to send out partial frames; this increases throughput
	# since TCP frames are filled up before being sent out. (adds TCP_CORK)
	tcp_nopush      on;

    include https_www_redirects.conf;
    include domain_redirects.conf;

    # Adding a default_server config ensures that all requests on port 80 that do not match existing server_name blocks
    # will go to the following server directive:
    server {
        listen  80 default_server;
        listen  [::]:80 default_server;
        return 301 https://www.$host$request_uri;
    }
}
